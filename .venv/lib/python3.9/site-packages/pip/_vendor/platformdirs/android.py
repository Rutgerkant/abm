<<<<<<< HEAD
<<<<<<< HEAD
"""Android."""
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
from __future__ import annotations

import os
import re
import sys
from functools import lru_cache
<<<<<<< HEAD
<<<<<<< HEAD
from typing import cast
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498

from .api import PlatformDirsABC


class Android(PlatformDirsABC):
    """
    Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_. Makes use of the
<<<<<<< HEAD
<<<<<<< HEAD
    `appname <platformdirs.api.PlatformDirsABC.appname>`,
    `version <platformdirs.api.PlatformDirsABC.version>`,
    `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
=======
    `appname <platformdirs.api.PlatformDirsABC.appname>` and
    `version <platformdirs.api.PlatformDirsABC.version>`.
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
    `appname <platformdirs.api.PlatformDirsABC.appname>` and
    `version <platformdirs.api.PlatformDirsABC.version>`.
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
    """

    @property
    def user_data_dir(self) -> str:
        """:return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``"""
<<<<<<< HEAD
<<<<<<< HEAD
        return self._append_app_name_and_version(cast(str, _android_folder()), "files")
=======
        return self._append_app_name_and_version(_android_folder(), "files")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
        return self._append_app_name_and_version(_android_folder(), "files")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498

    @property
    def site_data_dir(self) -> str:
        """:return: data directory shared by users, same as `user_data_dir`"""
        return self.user_data_dir

    @property
    def user_config_dir(self) -> str:
        """
<<<<<<< HEAD
<<<<<<< HEAD
        :return: config directory tied to the user, e.g. \
        ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``
        """
        return self._append_app_name_and_version(cast(str, _android_folder()), "shared_prefs")
=======
        :return: config directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``
        """
        return self._append_app_name_and_version(_android_folder(), "shared_prefs")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
        :return: config directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``
        """
        return self._append_app_name_and_version(_android_folder(), "shared_prefs")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498

    @property
    def site_config_dir(self) -> str:
        """:return: config directory shared by the users, same as `user_config_dir`"""
        return self.user_config_dir

    @property
    def user_cache_dir(self) -> str:
        """:return: cache directory tied to the user, e.g. e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>``"""
<<<<<<< HEAD
<<<<<<< HEAD
        return self._append_app_name_and_version(cast(str, _android_folder()), "cache")

    @property
    def site_cache_dir(self) -> str:
        """:return: cache directory shared by users, same as `user_cache_dir`"""
        return self.user_cache_dir
=======
        return self._append_app_name_and_version(_android_folder(), "cache")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
        return self._append_app_name_and_version(_android_folder(), "cache")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498

    @property
    def user_state_dir(self) -> str:
        """:return: state directory tied to the user, same as `user_data_dir`"""
        return self.user_data_dir

    @property
    def user_log_dir(self) -> str:
        """
        :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,
          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``
        """
        path = self.user_cache_dir
        if self.opinion:
<<<<<<< HEAD
<<<<<<< HEAD
            path = os.path.join(path, "log")  # noqa: PTH118
=======
            path = os.path.join(path, "log")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
            path = os.path.join(path, "log")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
        return path

    @property
    def user_documents_dir(self) -> str:
<<<<<<< HEAD
<<<<<<< HEAD
        """:return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``"""
        return _android_documents_folder()

    @property
    def user_downloads_dir(self) -> str:
        """:return: downloads directory tied to the user e.g. ``/storage/emulated/0/Downloads``"""
        return _android_downloads_folder()

    @property
    def user_pictures_dir(self) -> str:
        """:return: pictures directory tied to the user e.g. ``/storage/emulated/0/Pictures``"""
        return _android_pictures_folder()

    @property
    def user_videos_dir(self) -> str:
        """:return: videos directory tied to the user e.g. ``/storage/emulated/0/DCIM/Camera``"""
        return _android_videos_folder()

    @property
    def user_music_dir(self) -> str:
        """:return: music directory tied to the user e.g. ``/storage/emulated/0/Music``"""
        return _android_music_folder()

    @property
=======
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
        """
        :return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``
        """
        return _android_documents_folder()

    @property
<<<<<<< HEAD
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
    def user_runtime_dir(self) -> str:
        """
        :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,
          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``
        """
        path = self.user_cache_dir
        if self.opinion:
<<<<<<< HEAD
<<<<<<< HEAD
            path = os.path.join(path, "tmp")  # noqa: PTH118
=======
            path = os.path.join(path, "tmp")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
            path = os.path.join(path, "tmp")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
        return path


@lru_cache(maxsize=1)
<<<<<<< HEAD
<<<<<<< HEAD
def _android_folder() -> str | None:
    """:return: base folder for the Android OS or None if it cannot be found"""
=======
def _android_folder() -> str:
    """:return: base folder for the Android OS"""
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
def _android_folder() -> str:
    """:return: base folder for the Android OS"""
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
    try:
        # First try to get path to android app via pyjnius
        from jnius import autoclass

<<<<<<< HEAD
<<<<<<< HEAD
        context = autoclass("android.content.Context")
        result: str | None = context.getFilesDir().getParentFile().getAbsolutePath()
    except Exception:  # noqa: BLE001
=======
        Context = autoclass("android.content.Context")  # noqa: N806
        result: str = Context.getFilesDir().getParentFile().getAbsolutePath()
    except Exception:
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
        Context = autoclass("android.content.Context")  # noqa: N806
        result: str = Context.getFilesDir().getParentFile().getAbsolutePath()
    except Exception:
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
        # if fails find an android folder looking path on the sys.path
        pattern = re.compile(r"/data/(data|user/\d+)/(.+)/files")
        for path in sys.path:
            if pattern.match(path):
                result = path.split("/files")[0]
                break
        else:
<<<<<<< HEAD
<<<<<<< HEAD
            result = None
=======
            raise OSError("Cannot find path to android app folder")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
            raise OSError("Cannot find path to android app folder")
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
    return result


@lru_cache(maxsize=1)
def _android_documents_folder() -> str:
    """:return: documents folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass

<<<<<<< HEAD
<<<<<<< HEAD
        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        documents_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOCUMENTS).getAbsolutePath()
    except Exception:  # noqa: BLE001
=======
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
        Context = autoclass("android.content.Context")  # noqa: N806
        Environment = autoclass("android.os.Environment")  # noqa: N806
        documents_dir: str = Context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS).getAbsolutePath()
    except Exception:
<<<<<<< HEAD
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
        documents_dir = "/storage/emulated/0/Documents"

    return documents_dir


<<<<<<< HEAD
<<<<<<< HEAD
@lru_cache(maxsize=1)
def _android_downloads_folder() -> str:
    """:return: downloads folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        downloads_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOWNLOADS).getAbsolutePath()
    except Exception:  # noqa: BLE001
        downloads_dir = "/storage/emulated/0/Downloads"

    return downloads_dir


@lru_cache(maxsize=1)
def _android_pictures_folder() -> str:
    """:return: pictures folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        pictures_dir: str = context.getExternalFilesDir(environment.DIRECTORY_PICTURES).getAbsolutePath()
    except Exception:  # noqa: BLE001
        pictures_dir = "/storage/emulated/0/Pictures"

    return pictures_dir


@lru_cache(maxsize=1)
def _android_videos_folder() -> str:
    """:return: videos folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        videos_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DCIM).getAbsolutePath()
    except Exception:  # noqa: BLE001
        videos_dir = "/storage/emulated/0/DCIM/Camera"

    return videos_dir


@lru_cache(maxsize=1)
def _android_music_folder() -> str:
    """:return: music folder for the Android OS"""
    # Get directories with pyjnius
    try:
        from jnius import autoclass

        context = autoclass("android.content.Context")
        environment = autoclass("android.os.Environment")
        music_dir: str = context.getExternalFilesDir(environment.DIRECTORY_MUSIC).getAbsolutePath()
    except Exception:  # noqa: BLE001
        music_dir = "/storage/emulated/0/Music"

    return music_dir


=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
=======
>>>>>>> 6114454574b66010154ad2fd1682d44572d1c498
__all__ = [
    "Android",
]
